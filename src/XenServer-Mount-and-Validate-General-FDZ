# ##########################################
# XenServer-Mount-and-Validate-General-FDZ
# Version: 0.1
# ##########################################

# (c) Copyright 2017 Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.


# NOTE: The output of guestfish commands goes to the OS-Volume
#              Activity log file ONLY if the first mount command is successful.
#              If the first mount command fails, you must check the
#              Image Streamer Activity log file to understand why
#              the first mount command failed.



# The output of the following guestfish echo commands goes 
# into the OS-Volume Activity log file.
echo "======================================="
echo "Linux-Mount-and-Validate-General-FDZ"
echo "======================================="
echo "Version of the libguestfs running in the Image Streamer:"
version
echo
 
# The following guestfish command lists the file systems
# present in the OS-Volume. It is there mostly for
# debug purposes.
echo
echo "List of file system present in the OS-Volume:"
list-filesystems
echo

# Redirect the output of the list-filesystems 
# guestfish command into the Image Streamer cat command
# which create a list-fs file with the list of file systems.
list-filesystems | cat > ./list-fs

# Search for the OS device. The output of the 
# inspect-os guestfish command goes out, into a file in the 
# Image Streamer. 
inspect-os | cat > ./OS-Dev

# For debug purposes we print the content of the ./OS-Dev
# file. It should contain only one line. However, the version of 
# guestfish used by OV 4.1 is buggy; on certain OS-Volumes (i.e. CentOS 7) 
# inspect-os returns several lines. 
echo
echo "List of OS devices found by guestfish (inspect-get-os):" 
!cat ./OS-Dev
echo

# NOTE: The following is a dirty fix of the buggy inspect-os 
# returning more than one OS. Basically, we noticed that 
# guestfish incorrectly proposes the vfat/UEFI partition 
# as an OS. Hence we remove the vfat partition from the 
# ./OS-Dev file:
!if [ $(cat ./OS-Dev | wc -l) -eq 2 ] ;then  VFAT_DEV=$(awk -F ":" '/vfat/ {print $1}' list-fs); awk -v vfat_dev=$VFAT_DEV '$0 != vfat_dev {print $0}' ./OS-Dev > ./OS-Dev2 ; mv ./OS-Dev2 ./OS-Dev ; fi

# Create the mount command and execute it. The !awk 
# command is executed by the Image Streamer. It prints
# the mount command.
# The "<" sign tells guestfish to execute the mount command.
echo "Mount Command:"

# Print the mount command for debug purposes:
!awk '/dev/ {print "mount", $0, "/"}' ./OS-Dev

# Perform the mount command:
<!awk '/dev/ {print "mount", $0, "/"}' ./OS-Dev

# Retrieve the OS type.
# The following "cat" command is executed by the guestfish shell. It sends 
# its output to the Image Streamer "awk" command which extracts the 
# ID property containing the OS Type. The output of the awk command
# goes into the ./OS-Type in the Image Streamer.
# The OS-Type is useful to distinguish Red Hat and SUSE specificity.
# NOTE: It should be possible to use the guestfish inspect-get-distro
# command to do the same.
cat /etc/os-release | awk -F '"' '/^ID=/ {print $2}' > ./OS-Type

!echo -n "OS-Type: "
!cat ./OS-Type

# Some OSs like CentOS and XerServer need the
# bootloader in the /EFI/BOOT directory of the UEFI vfat partition. 
#
# NOTE: the following code should be re-written with a case-esac to be nicer....
#

# XenServer
<!if [[ ! $(grep -q "xen" ./OS-Type) ]] ; then echo 'echo "XenServer: Copying the bootloader in the /EFI/BOOT directory of the UEFI partition."' ; fi
<!if [[ ! $(grep -q "xen" ./OS-Type) ]] ; then awk -F ":" '/vfat/ {print "-mount", $1, "/boot"}' ./list-fs; fi
<!if [[ ! $(grep -q "xen" ./OS-Type) ]] ; then echo "-mkdir /boot/EFI/BOOT " ; echo "cp /boot/EFI/xenserver/grubx64.efi /boot/EFI/BOOT/bootx64.efi" ; fi

upload -<<END /boot/EFI/BOOT/bootx64.cfg
default=0
timeout=2
title Chainloader switch to Xenserver
    root (hd0,0)
    chainloader /EFI/XENSERVER/GRUBX64.EFI
END



# The output of the following guestfish command
# goes in the OS-Volume Activity log file.
echo "Create temporary directory /temp/ImageStreamer"
mkdir-p /temp/ImageStreamer


# The output of the following guestfish command
# goes in the OS-Volume Activity log file.
echo "Check Image Streamer capture details"

# The following guestfish command copies out the /ImageStreamerCapture
# file from the OS-Volume to the Image Streamer. If this command
# fails, guestfish will continue anyway.
-download /ImageStreamerCapture ./ImageStreamerCapture

# Creation of a shell script in the OS-Volume to check 
# if it has been correctly generated by a valid Golden Image.
# This script will be pushed out to the Image Streamer for
# execution.
# Because the execution of this script is performed by the Image
# Streamer, the output of its commands (i.e. echo) goes
# in the OS-Volume Activity log file.
upload -<<END /temp/ImageStreamer/check_capture
#!/bin/bash
if [ -f ./ImageStreamerCapture ]; then
    echo  "Capture details:"
    cat ./ImageStreamerCapture
else
    echo
    echo "WARNING:  Golden Image not captured by Image Streamer."
    echo "Golden Image may not be prepared for correct personalization."
    echo "Recommend deploying Golden Image as is and capturing a new"
    echo "Golden Image using Image Streamer via correct capture Build Plan"
    echo
fi
echo
END

# The following command copies out the above script
# to the Image Streamer.
download /temp/ImageStreamer/check_capture ./check_capture

# The following commands asks the Image Streamer to launch the 
# above script.
!source ./check_capture


# The following guestfish commands cleans
# several files in the OS-Volume. They will
# be re-created by the corresponding systemctl services.
# If a file does not exist, guestfish will continue anyway.
echo "Cleanup various files (for safety)"
-rm-f /var/log/messages
-rm-f /var/log/wtmp
-rm-f /var/log/btmp
-rm-f /var/log/secure

# Guestfish removal of the /ImageStreamerCapture file.
# We don't need it anymore since we are now in an OS-Volume
# and not a Golden Image anymore.
-rm-f /ImageStreamerCapture

# The output of the following echo command goes
# in the OS-Volume Activity log file.
<!awk '/rhel/ || /centos/ {print "echo copy out rc.local"} ; /sles/ {print "echo Copy out after.local"}' ./OS-Type


# Guestfish copy-out of the OS-Volume RC file
# to the Image Streamer so the deployment Plan Scripts
# can append commands in it.
# Before the copy-out we touch it, just in case it does not exists. 
<!awk '/rhel/ || /centos/ {print "touch /etc/rc.d/rc.local"} ; /sles/ {print "touch /etc/init.d/after.local"}' ./OS-Type
<!awk '/rhel/ || /centos/ {print "download /etc/rc.d/rc.local ./RC-FILE"} ; /sles/ {print "download /etc/init.d/after.local ./RC-FILE"}' ./OS-Type

# copy-out to the Image Streamer a backup of the RC file
echo "Copy out a backup of the RC file"
<!awk '/rhel/ || /centos/ {print "download /etc/rc.d/rc.local ./RC-FILE.backup"} ; /sles/ {print "download /etc/init.d/after.local ./RC-FILE.backup"}' ./OS-Type

#Setup RC file to run scripts at next boot time.
# The following echo command is executed by the Image Streamer.
# Its output is appended to the just copied-out rc.local file.
!echo "#The following commands has been added by the Image Streamer" >> ./RC-FILE

echo "Make sure RC file begins with !#/bin/bash" 
!sed -i '1s/#!\/bin\/bash//' ./RC-FILE
!sed -i '1i #!/bin/bash' ./RC-FILE

echo "print out the content the RC file for debug purposes." 
!cat ./RC-FILE


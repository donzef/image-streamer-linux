# Plan Script Type: deploy

# Plan Script Description:
# Perform various OS dependent actions Tested with CentOS 7, SLE 15, XenServer 
# 7.6, Ubuntu 19.04

############
# ##########################################
# Prepare-for-DeploymentPS-EFI
# Version: 0.3
# ##########################################

# (c) Copyright 2017 Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.


# NOTE: The output of guestfish commands goes to the OS-Volume
# Activity log file ONLY if the first mount command is successful.
# If the first mount command fails, you must check the
# Image Streamer Activity log file to understand why
# the first mount command failed.



# The output of the following guestfish echo commands goes 
# into the OS-Volume Activity log file.
echo
echo "======================================="
echo "Prepare-for-DeploymentPS-EFI"
echo "======================================="
echo

# Populate OS-Type using custom attribute
!echo "@OS_Type:centos@" > ./OS-Type
upload ./OS-Type /EFI/HPE/isdeploy/data/OS-Type

# Some OSs like CentOS and XenServer need the
# bootloader in the /EFI/BOOT directory of the UEFI vfat partition. 
# 

# CentOS
<!if $(grep -q "centos" ./OS-Type) ; then echo 'echo " CentOS: Copying the bootloader in the /EFI/BOOT directory of the UEFI partition."' ; fi
<!if $(grep -q "centos" ./OS-Type) ; then echo "cp /EFI/centos/grubx64.efi /EFI/BOOT/." ; fi

# XenServer
<!if $(grep -q "xen" ./OS-Type) ; then echo 'echo " XenServer: Copying the bootloader in the /EFI/BOOT directory of the UEFI partition."' ; fi
<!if $(grep -q "xen" ./OS-Type) ; then echo "-mkdir /EFI/BOOT " ; echo "cp /EFI/xenserver/grubx64.efi /EFI/BOOT/bootx64.efi" ; fi

# In case of XenServer create a bootx64.cfg file. 
upload -<<END /EFI/HPE/isdeploy/tmp/bootx64.cfg-for-XenServer
default=0
timeout=2
title Chainloader switch to Xenserver
 root (hd0,0)
 chainloader /EFI/XENSERVER/GRUBX64.EFI
END

# If XenServer move the pre-created bootx64-cfg to /boot/EFI/BOOT/bootx64.cfg
<!if $(grep -q "xen" ./OS-Type) ; then echo 'echo " XenServer: Moving pre-created bootx64.cfg to /EFI/BOOT/ directory."' ; fi
<!if $(grep -q "xen" ./OS-Type) ; then echo "-mv /EFI/HPE/isdeploy/tmp/bootx64.cfg-for-XenServer /EFI/BOOT/bootx64.cfg" ; fi


# The following guestfish upload command posts a bash script
# in the UEFI partition. This bash script will be executed during
# the next reboot of the freshly deployed OS volume, providing its
# invocation during the initial installation of the OS in an Empty OS volume. 

upload -<<END /EFI/HPE/isdeploy/HPE-ImageStreamer.bash
#! /bin/bash
# Version: 0.1
# This script was loaded by HPE Image Streamer

# variable definitions
DATE=$(which date)
LS=$(which ls)
MV=$(which mv)
CP=$(which cp)
RM=$(which rm)
BASENAME=$(which basename)


ISROOT="/boot/efi/EFI/HPE/isdeploy/"
LOGFILE="${ISROOT}../$(${BASENAME} $0).log"


# prep
echo "$(${DATE})" >> ${LOGFILE} 2>&1
cd $ISROOT >> ${LOGFILE} 2>&1

# process
# - invoke all executables in sub-directory ./scripts (in lexographic order)
# assumes :
# all scripts handle their own logging (for later debugging)
# are independent/self-contained
# (but can source info from other sub-directories/files)
# if script run
# succeeds, then script is moved to ./tmp
# has issues, leave in place (for later debug)
# - if entire process is
# successful
# remove top-level ISROOT directory
# has errors
#

RC=0

for i in $(${LS} scripts/* 2>/dev/null)
do
 # Note: execute status is really a function of the FAT partition mount
 [ -n ${i} ] && [ -x ${i} ] && {

 echo "=== ${i} "

 if ${i};
 then
 ${MV} ${i} ./tmp
 else
 RC=1
 fi
 } >> ${LOGFILE} 2>&1
done

if [ ${RC} -eq 0 ];
then
 {
 # temp saves

 ${CP} -p $(${BASENAME} $0) ./tmp

 ${RM} -rf ${ISROOT}

 } >> ${LOGFILE} 2>&1
else
 {
 ${MV} -f $(${BASENAME} $0) ${ISROOT}../
 echo "Failures found, please review ${LOGFILE}"
 } >> ${LOGFILE} 2>&1
fi

exit 0
END
